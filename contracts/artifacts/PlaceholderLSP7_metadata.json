{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "authorizedAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsAuthorizedAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotSendWithAddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotUseAddressZeroAsOperator",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7InvalidTransferBatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverContractMissingLSP1Interface",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverIsEOA",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "AuthorizedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "DataChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "RevokedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "authorizeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getData",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "getData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "isOperatorFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "revokeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "from",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amount",
						"type": "uint256[]"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "transferBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"authorizeOperator(address,uint256)": {
					"details": "Sets `amount` as the amount of tokens `operator` address has access to from callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits an {AuthorizedOperator} event.",
					"params": {
						"amount": "The amount of tokens operator has access to.",
						"operator": "The address to authorize as an operator."
					}
				},
				"balanceOf(address)": {
					"details": "Returns the number of tokens owned by `tokenOwner`.",
					"params": {
						"tokenOwner": "The address to query"
					},
					"returns": {
						"_0": "The number of tokens owned by this address"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}."
				},
				"getData(bytes32)": {
					"params": {
						"dataKey": "The key which value to retrieve"
					},
					"returns": {
						"dataValue": "The data stored at the key"
					}
				},
				"getData(bytes32[])": {
					"params": {
						"dataKeys": "The array of keys which values to retrieve"
					},
					"returns": {
						"dataValues": "The array of data stored at multiple keys"
					}
				},
				"isOperatorFor(address,address)": {
					"details": "Returns amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator.",
					"params": {
						"operator": "The address to query operator status for.",
						"tokenOwner": "The token owner."
					},
					"returns": {
						"_0": "The amount of tokens `operator` address has access to from `tokenOwner`."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"revokeOperator(address)": {
					"details": "Removes `operator` address as an operator of callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits a {RevokedOperator} event.",
					"params": {
						"operator": "The address to revoke as an operator."
					}
				},
				"setData(bytes32,bytes)": {
					"params": {
						"dataKey": "The key which value to retrieve",
						"dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
					}
				},
				"setData(bytes32[],bytes[])": {
					"details": "Sets array of data at multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
					"params": {
						"dataKeys": "The array of keys which values to set",
						"dataValues": "The array of values to set"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"totalSupply()": {
					"details": "Returns the number of existing tokens.",
					"returns": {
						"_0": "The number of existing tokens"
					}
				},
				"transfer(address,address,uint256,bool,bytes)": {
					"details": "Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used when notifying the token sender and receiver. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits a {Transfer} event.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
						"force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
						"from": "The sending address.",
						"to": "The receiving address."
					}
				},
				"transferBatch(address[],address[],uint256[],bool,bytes[])": {
					"details": "Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `amount` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits {Transfer} events.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
						"force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
						"from": "The list of sending addresses.",
						"to": "The list of receiving addresses."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"DataChanged(bytes32)": {
					"notice": "Emitted when data at a key is changed"
				}
			},
			"kind": "user",
			"methods": {
				"getData(bytes32)": {
					"notice": "Gets singular data at a given `dataKey`"
				},
				"getData(bytes32[])": {
					"notice": "Gets array of data at multiple given keys"
				},
				"setData(bytes32,bytes)": {
					"notice": "Sets singular data at a given `dataKey`"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PlaceholderLSP7.sol": "PlaceholderLSP7"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@erc725/smart-contracts/contracts/ERC725Y.sol": {
			"keccak256": "0xe3947b1958d2a90ce0a41ce7635112f4baf24b9ad6e0a8e0d60178d7edb0355d",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://30394b85f5a84a639a7d42af44680998d1011292d3846f7e12633cbe47af20ec",
				"dweb:/ipfs/QmYQ8cCurFrbyfmqnhebzmfUbLBDCqUQKvQobFhsU2hQTZ"
			]
		},
		"@erc725/smart-contracts/contracts/ERC725YCore.sol": {
			"keccak256": "0x215fc8caf03c1af787a3e46db456bdc8e3a662345d40a34f20e35af220f4e77b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fc44c50e8440965cb7fd412be9d17cdfdb6400af8a6e0fa3e9cc9fe55b730a4a",
				"dweb:/ipfs/Qme7jiVkpW6vMjibotZoZatZFsYYg6SnDhWNkikAdUUheQ"
			]
		},
		"@erc725/smart-contracts/contracts/constants.sol": {
			"keccak256": "0xdf3d466e2d6f8d0f2e288ee01edb0cf7de2db9cac3c257b7d6a6284adf4b2480",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://16e4a90c8f2d245621808320ed6aa4ad7fcfd50b36df116e8447e5fc1700d7a9",
				"dweb:/ipfs/QmT4E9cSMuwpiABbdKExNn3Ef9wmjdmv3E9MuwkmkDv6BY"
			]
		},
		"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
			"keccak256": "0x410d0a0c6f9f769b79cf7d34c097c967160f5f9876453b2a1659cbb8082a4961",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e1068d9896dfe4d2d73cd75506f52f572daa3a4f35c0f980fdd91d3faa52ecf",
				"dweb:/ipfs/QmVodeBozCKcU2vdofRtKF5RAi42q3zBNW9SEYrg7SexDP"
			]
		},
		"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0x4144879c1923deaac59a07abd5dabb9d8c50b5b4522e3fb9158e0e63a3ce696b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://810f61f5ed8fb2ac8270751188382c0f66b268dcf5e877e2d320b6dc95c44528",
				"dweb:/ipfs/QmR7GYVw79YypsAWg5jfNzNMCE3NJqersoqCkyux3MR8oa"
			]
		},
		"@erc725/smart-contracts/contracts/utils/GasLib.sol": {
			"keccak256": "0xd69f4d06630e47043a59e2173badd2275c6762d9109cc792d5891101686f6c2b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://55e5b55b404e0897c84c598ab5bcc4621258c13c849c1bd55d3807dd7e25705c",
				"dweb:/ipfs/QmZgAUofnxdxbp2T3dTyULqnp4kzXWWZJ8UBWqqdxi4Ywt"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/Custom/ERC165Checker.sol": {
			"keccak256": "0x076fb61a330055d96723ad73383629e0ff2e5f903b2ba67e323318ef2e78ec7c",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bf3f35a840ad8f800f149d504082abdd08d656954d9f9066f9ca4867f9428c4",
				"dweb:/ipfs/QmNSbTbn7LceU2s6QuBKoV6vA4ujVX5nvNmwR7XqT2wE3j"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": {
			"keccak256": "0xbca7d0f76e439ee3302096f8ecaf8a506434a83c86639c95efd79e6b89d364ae",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://c4e3931e406a2e0c69bd5a7c5a677541a36dcdda01682e46bf7180bc814495a7",
				"dweb:/ipfs/QmWRZZ2XerqFttSpcCv27Fk4bTzHAVaKHFxCLYGFmYj1uK"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol": {
			"keccak256": "0x37255dac370701b20dc046c41024686ccf5a88eb1e68415c30167015f6f80f17",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fdfe8b6cd1deddcf3d3110f54b6a8bb9a73412c4f8cc40369027e82fe55322e1",
				"dweb:/ipfs/QmdwssJrfuT3nrub7M5fr8ZwT8WeAytbx8z2K9rwgjVnv4"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol": {
			"keccak256": "0x558b930e6e463a4430c7825f6d007337a7684916a62c79f68fef33c6eb321851",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://c96ea3fca0c18b83f949cf9f2c08ae6f4ddd12a17ae78d652ae9e7314cf25dcb",
				"dweb:/ipfs/QmYwVFYHzkPxsPnyFWCaBLJtF7rBRuK3TYffFJvfykosBL"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol": {
			"keccak256": "0x5c33fb49fb11ad56ef96f972d9bb8bce123141e6d4f285b79dcaee8bc7f05ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://bec86dd1a72d9d0c92014879442a936d59d061d4d199ecd1b7e0bf6a4d1a07c4",
				"dweb:/ipfs/QmSURNrchBiJ7WWndS1xb4hXXrqCHoQsYjXcvtgfDZ69NZ"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/ILSP7DigitalAsset.sol": {
			"keccak256": "0xf97a6b9ccef6bf4fdca7f812e7992dfc96326563c52085a402341ba20ce2b065",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4209dbee84b27421aa12bbf5166dd9f4d093f1ff54e9bb1414a14f0618596ad",
				"dweb:/ipfs/QmNnNiPt7juL8A4TmjmyjnJCrBvRNwqbb8WhoahRaa1X7r"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Constants.sol": {
			"keccak256": "0x6a6665e00c970c36ffbad136eb02f70093351060906d18af04b4c56d36c11b29",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://42b4fe19d2a7158bdf36247cb48d28fdc108c5cd153b99a5580d4c3996affdff",
				"dweb:/ipfs/QmQnRzahDqmRQhW3YH7EiDBoFaE4mjzMeamMWkvauvmn4C"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAsset.sol": {
			"keccak256": "0x5a89d92c91dfe5b6e66440374a68a29bd679ab1f4e8ff932ec5a20c575a63976",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://598beaafac0c9577a67e7fc0b893d38a1a16381eeee43da625fdae972eb6a92c",
				"dweb:/ipfs/QmTC8pqwQhwWGkZS8Vqt2LzMeXKwfWn6Rx3QTRcB6hbBnA"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAssetCore.sol": {
			"keccak256": "0x6a68f777ea0d83f881ac716f2c57d4c07200f64296f843c7d4a003d85511aa8f",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://58a1b2d989d55dae0fcf6fe2cf46c71e7297b323b332b5c744aced979e01a229",
				"dweb:/ipfs/QmeAUoEiGpxPPuwTLpapSWRvLtD2Cgg3si5prHSrXGem1f"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Errors.sol": {
			"keccak256": "0xaf41eac66310a5a0c0dd84168cc0ce8acd5858a1c613ccb4103f44c6061f8a17",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://d24e6da001d81e6be06feaa05167fdc479f5f19a0f1042340ba859d785c131ba",
				"dweb:/ipfs/QmSDNo2eC1scKcMdZew4fJGbrACymNjkG46C2d6PNkmBPy"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
			"license": "MIT",
			"urls": [
				"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
				"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271",
				"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24"
			]
		},
		"contracts/PlaceholderLSP7.sol": {
			"keccak256": "0x69442f05ebe144f799b437916ba5bffe9fdd9a956e77003cc63f77b169d6f2de",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://03a7752419eeca626464dd75fd651e963e663b691c83317393395299cb7591b2",
				"dweb:/ipfs/Qmb2PvS4B7yvZ3KTypQSD58RzowE1rQqxvrE4PqhvLxmEw"
			]
		}
	},
	"version": 1
}